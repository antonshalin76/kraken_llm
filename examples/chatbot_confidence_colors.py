#!/usr/bin/env python3
"""
–ß–∞—Ç-–±–æ—Ç —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
1. RESPONSE - –æ–∫—Ä–∞—Å–∫–∞ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ 
2. TOKEN - –æ–∫—Ä–∞—Å–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
3. HYBRID - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ–±–µ–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏

–ó–∞–ø—É—Å–∫:
    python3 examples/chatbot_confidence_colors.py [--mode RESPONSE|TOKEN|HYBRID]

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    LLM_ENDPOINT, LLM_API_KEY (–∏–ª–∏ LLM_TOKEN), LLM_MODEL
"""

import asyncio
import argparse
import os
import sys
from enum import Enum
from typing import List, Dict, Any, Optional
from pathlib import Path

from dotenv import load_dotenv
from kraken_llm import LLMConfig, create_universal_client
from kraken_llm.utils.color import (
    colorize_text_ansi,
    colorize_tokens_ansi,
    get_confidence_legend_ansi,
    get_confidence_description,
)
from kraken_llm.confidence.filter import ConfidenceFilterConfig, ensure_confident_chat


class DisplayMode(Enum):
    """–†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    RESPONSE = "response"    # –û–∫—Ä–∞—Å–∫–∞ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    TOKEN = "token"         # –û–∫—Ä–∞—Å–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ –µ–≥–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏  
    HYBRID = "hybrid"       # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º


class ConfidenceChatBot:
    """–ß–∞—Ç-–±–æ—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."""
    
    def __init__(self, config: LLMConfig, display_mode: DisplayMode = DisplayMode.RESPONSE,
                 min_confidence: float = 0.8,
                 per_token_threshold: float = 0.4,
                 max_low_conf_fraction: Optional[float] = 0.34):
        self.config = config
        self.display_mode = display_mode
        self.conversation_history: List[Dict[str, str]] = []
        self.min_confidence = float(min_confidence)
        self.per_token_threshold = float(per_token_threshold)
        self.max_low_conf_fraction = max_low_conf_fraction if max_low_conf_fraction is not None else None
        
    async def get_response(self, user_input: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.
        
        Args:
            user_input: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({"role": "user", "content": user_input})
        
        async with create_universal_client(self.config) as client:
            # –ó–∞–ø—Ä–æ—Å —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            response = await client.chat_completion(
                messages=self.conversation_history.copy(),
                include_confidence=True,
                max_tokens=512,
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º logprobs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω-—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
                logprobs=True,
                top_logprobs=5
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            response_text = response.get("text", "") if isinstance(response, dict) else str(response)
            self.conversation_history.append({"role": "assistant", "content": response_text})
            
            return response
    
    def display_response_mode(self, response: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ RESPONSE (–æ–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)."""
        text = response.get("text", "")
        confidence = response.get("confidence", 0.5)
        confidence_label = response.get("confidence_label", "—Å—Ä–µ–¥–Ω—è—è")
        
        print(f"\nü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–æ–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f} - {confidence_label}):")
        
        # –û–∫—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        colored_text = colorize_text_ansi(text, confidence)
        print(colored_text)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "total_tokens" in response:
            print(f"\nüìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {response['total_tokens']}")
    
    def display_token_mode(self, response: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ TOKEN (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤)."""
        text = response.get("text", "")
        token_confidences = response.get("token_confidences", [])
        
        print(f"\nü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (—Ç–æ–∫–µ–Ω-—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏):")
        
        if token_confidences:
            # –û–∫—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            colored_text = colorize_tokens_ansi(token_confidences)
            print(colored_text)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
            avg_conf = sum(t.get("confidence", 0) for t in token_confidences) / len(token_confidences)
            min_conf = min(t.get("confidence", 1) for t in token_confidences)
            max_conf = max(t.get("confidence", 0) for t in token_confidences)
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(token_confidences)}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.3f} ({get_confidence_description(avg_conf)})")
            print(f"   ‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_conf:.3f} ({get_confidence_description(min_conf)})")
            print(f"   ‚Ä¢ –ú–∞–∫—Å. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_conf:.3f} ({get_confidence_description(max_conf)})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            low_conf_tokens = [t for t in token_confidences if t.get("confidence", 1) < 0.5]
            if low_conf_tokens:
                print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ({len(low_conf_tokens)}):")
                for token_info in sorted(low_conf_tokens, key=lambda x: x.get("confidence", 1))[:5]:
                    token = token_info.get("token", "").replace('ƒ†', ' ').replace('‚ñÅ', ' ')
                    conf = token_info.get("confidence", 0)
                    print(f"     - '{token.strip()}': {conf:.3f}")
        else:
            # Fallback - –æ–∫—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = response.get("confidence", 0.5)
            colored_text = colorize_text_ansi(text, confidence)
            print(colored_text)
            print("\n‚ö†Ô∏è  –¢–æ–∫–µ–Ω-—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    
    def display_hybrid_mode(self, response: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ HYBRID."""
        text = response.get("text", "")
        confidence = response.get("confidence", 0.5)
        confidence_label = response.get("confidence_label", "—Å—Ä–µ–¥–Ω—è—è")
        token_confidences = response.get("token_confidences", [])
        
        print(f"\nü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º):")
        print(f"üìà –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f} ({confidence_label})")
        
        if token_confidences:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ–º
            print("üé® –¢–µ–∫—Å—Ç —Å —Ç–æ–∫–µ–Ω-—É—Ä–æ–≤–Ω–µ–≤—ã–º –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ–º:")
            colored_text = colorize_tokens_ansi(token_confidences)
            print(colored_text)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidences = [t.get("confidence", 0) for t in token_confidences]
            avg_conf = sum(confidences) / len(confidences)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            very_high = sum(1 for c in confidences if c >= 0.9)
            high = sum(1 for c in confidences if 0.7 <= c < 0.9) 
            medium = sum(1 for c in confidences if 0.5 <= c < 0.7)
            low = sum(1 for c in confidences if 0.3 <= c < 0.5)
            very_low = sum(1 for c in confidences if c < 0.3)
            
            print(f"\nüìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(token_confidences)}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤: {avg_conf:.3f}")
            print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            print(f"     - –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (‚â•0.9): {very_high} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"     - –í—ã—Å–æ–∫–∞—è (0.7-0.9): {high} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"     - –°—Ä–µ–¥–Ω—è—è (0.5-0.7): {medium} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"     - –ù–∏–∑–∫–∞—è (0.3-0.5): {low} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"     - –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (<0.3): {very_low} —Ç–æ–∫–µ–Ω–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π –∏ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ–∫–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            diff = abs(confidence - avg_conf)
            if diff > 0.1:
                print(f"   ‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—â–µ–π –∏ —Ç–æ–∫–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {diff:.3f}")
        else:
            # Fallback –∫ —Ä–µ–∂–∏–º—É RESPONSE
            colored_text = colorize_text_ansi(text, confidence)
            print(colored_text)
            print("\n‚ö†Ô∏è  –¢–æ–∫–µ–Ω-—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def _token_profile_violates(self, token_confidences: List[Dict[str, Any]], per_token_threshold: float, max_low_conf_fraction: Optional[float]) -> bool:
        if not token_confidences:
            return False
        total = len(token_confidences)
        low = sum(1 for t in token_confidences if float(t.get("confidence", 0) or 0.0) < per_token_threshold)
        if max_low_conf_fraction is None:
            return False
        return (low / total) > max_low_conf_fraction if total > 0 else False

    def display_response(self, response: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É."""
        if self.display_mode == DisplayMode.RESPONSE:
            self.display_response_mode(response)
        elif self.display_mode == DisplayMode.TOKEN:
            self.display_token_mode(response)
        elif self.display_mode == DisplayMode.HYBRID:
            self.display_hybrid_mode(response)

    async def maybe_regenerate(self, response: Dict[str, Any], min_confidence: float, per_token_threshold: float, max_low_conf_fraction: Optional[float]) -> Optional[Dict[str, Any]]:
        """–ï—Å–ª–∏ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."""
        overall_ok = float(response.get("confidence", 0.0) or 0.0) >= min_confidence
        token_ok = True
        if "token_confidences" in response:
            token_ok = not self._token_profile_violates(
                response.get("token_confidences") or [], per_token_threshold, max_low_conf_fraction
            )
        if overall_ok and token_ok:
            return None

        print("\nüîÅ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        cfg = ConfidenceFilterConfig(
            min_confidence=min_confidence,
            max_attempts=3,
            prefer_streaming=True,  # —Å–æ–±–∏—Ä–∞—Ç—å –ø–µ—Ä‚Äë—Ç–æ–∫–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            per_token_threshold=per_token_threshold,
            max_low_conf_fraction=max_low_conf_fraction,
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        messages = self.conversation_history[:-1]
        async with create_universal_client(self.config) as client:
            regen = await ensure_confident_chat(
                client,
                messages=messages,
                cfg=cfg,
                max_tokens=512,
            )
        return regen
    
    def print_welcome_message(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        print("=" * 70)
        print("üåà KRAKEN CONFIDENCE CHATBOT")
        print("=" * 70)
        print(f"–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {self.display_mode.value.upper()}")
        
        if self.display_mode == DisplayMode.RESPONSE:
            print("‚Ä¢ –í–µ—Å—å –æ—Ç–≤–µ—Ç –æ–∫—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
        elif self.display_mode == DisplayMode.TOKEN:
            print("‚Ä¢ –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –æ–∫—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ —Å–≤–æ–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        elif self.display_mode == DisplayMode.HYBRID:
            print("‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±—â–∞—è + —Ç–æ–∫–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        
        print("\n" + get_confidence_legend_ansi())
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("‚Ä¢ 'exit' –∏–ª–∏ 'quit' - –≤—ã—Ö–æ–¥")
        print("‚Ä¢ 'clear' - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞") 
        print("‚Ä¢ 'mode' - —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("=" * 70)
    
    def change_mode(self) -> None:
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        print("1. RESPONSE - –æ–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        print("2. TOKEN - —Ç–æ–∫–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        print("3. HYBRID - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
        
        while True:
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
                if choice == "1":
                    self.display_mode = DisplayMode.RESPONSE
                    break
                elif choice == "2":
                    self.display_mode = DisplayMode.TOKEN
                    break
                elif choice == "3":
                    self.display_mode = DisplayMode.HYBRID
                    break
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
            except KeyboardInterrupt:
                break
        
        print(f"\n‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.display_mode.value.upper()}")
    
    def clear_history(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
        self.conversation_history = []
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç-–±–æ—Ç."""
        self.print_welcome_message()
        
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user_input = input("\nüë§ –í—ã: ").strip()
                except KeyboardInterrupt:
                    print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if user_input.lower() in ["exit", "quit", "–≤—ã—Ö–æ–¥", "–π", "q"]:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif user_input.lower() in ["clear", "–æ—á–∏—Å—Ç–∏—Ç—å"]:
                    self.clear_history()
                    continue
                elif user_input.lower() in ["mode", "—Ä–µ–∂–∏–º"]:
                    self.change_mode()
                    continue
                elif not user_input:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                try:
                    print("\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
                    response = await self.get_response(user_input)
                    self.display_response(response)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    regen = await self.maybe_regenerate(
                        response,
                        min_confidence=self.min_confidence,
                        per_token_threshold=self.per_token_threshold,
                        max_low_conf_fraction=self.max_low_conf_fraction,
                    )
                    if regen is not None:
                        print("\n‚úÖ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç:")
                        self.display_response(regen)
                    
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–ß–∞—Ç-–±–æ—Ç —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    parser.add_argument(
        "--mode", 
        choices=["response", "token", "hybrid"],
        default="response",
        help="–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: response)"
    )
    parser.add_argument(
        "--min-confidence",
        type=float,
        default=0.8,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    )
    parser.add_argument(
        "--per-token-threshold",
        type=float,
        default=0.4,
        help="–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é —Ç–æ–∫–µ–Ω–æ–≤)"
    )
    parser.add_argument(
        "--max-low-conf-fraction",
        type=float,
        default=0.34,
        help="–ú–∞–∫—Å. –¥–æ–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    )
    parser.add_argument(
        "--model",
        help="–ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)"
    )
    parser.add_argument(
        "--endpoint",
        help="Endpoint API (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)"
    )
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    load_dotenv()
    
    config = LLMConfig(
        endpoint=args.endpoint or os.getenv("LLM_ENDPOINT"),
        api_key=os.getenv("LLM_API_KEY") or os.getenv("LLM_TOKEN"),
        model=args.model or os.getenv("LLM_MODEL"),
        temperature=0.7,
        # –í–∫–ª—é—á–∞–µ–º logprobs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω-—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        logprobs=True,
        top_logprobs=5
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω API –∫–ª—é—á. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LLM_API_KEY –∏–ª–∏ LLM_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç-–±–æ—Ç
    display_mode = DisplayMode(args.mode)
    chatbot = ConfidenceChatBot(
        config,
        display_mode,
        min_confidence=float(args.min_confidence),
        per_token_threshold=float(args.per_token_threshold),
        max_low_conf_fraction=float(args.max_low_conf_fraction) if args.max_low_conf_fraction is not None else None,
    )
    
    await chatbot.run()


if __name__ == "__main__":
    asyncio.run(main())