#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ kraken-llm
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import asyncio
import sys
import os
from dotenv import load_dotenv

from kraken_llm import create_universal_client, UniversalCapability, LLMConfig

load_dotenv()


class SimpleChatBot:
    """–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç —Å –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞"""
        self.config = LLMConfig(
                endpoint=os.getenv("LLM_ENDPOINT"),
                api_key=os.getenv("LLM_TOKEN"),
                model=os.getenv("LLM_MODEL")            
            )
        self.history = []
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞"""
        print("ü§ñ –ü—Ä–æ—Å—Ç–æ–π –ß–∞—Ç-–ë–æ—Ç –Ω–∞ –±–∞–∑–µ Kraken LLM")
        print("=" * 50)
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  'quit' –∏–ª–∏ 'q' - –≤—ã—Ö–æ–¥")
        print("  'clear' - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  'history' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
        print("=" * 50)
        print()
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        async with create_universal_client(
            config=self.config,
            capabilities={
                UniversalCapability.CHAT_COMPLETION,
                UniversalCapability.STREAMING
            }
        ) as client:
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("üí¨ –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ (–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):")
            print()
            
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_input = input("üë§ –í—ã: ").strip()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if user_input.lower() in ['quit', 'q', 'exit']:
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                        
                    elif user_input.lower() == 'clear':
                        self.history.clear()
                        print("üóëÔ∏è  –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞\n")
                        continue
                        
                    elif user_input.lower() == 'history':
                        self.show_history()
                        continue
                        
                    elif not user_input:
                        print("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.history.append({"role": "user", "content": user_input})
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
                    messages = self.history[-10:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    
                    print("ü§ñ –ë–æ—Ç: ", end="", flush=True)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                    bot_response = ""
                    async for chunk in client.chat_completion_stream(
                        messages=messages,
                        max_tokens=16384,
                        temperature=0.5
                    ):
                        print(chunk, end="", flush=True)
                        bot_response += chunk
                    
                    print("\n")  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.history.append({"role": "assistant", "content": bot_response})
                    
                except KeyboardInterrupt:
                    print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'quit'")
                    continue
                    
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")
                    continue
    
    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if not self.history:
            print("üìù –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞\n")
            return
            
        print("\nüìù –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:")
        print("-" * 40)
        
        for i, message in enumerate(self.history, 1):
            role = "üë§ –í—ã" if message["role"] == "user" else "ü§ñ –ë–æ—Ç"
            content = message["content"]
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if len(content) > 100:
                content = content[:100] + "..."
                
            print(f"{i:2}. {role}: {content}")
            
        print("-" * 40)
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.history)}\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleChatBot()
    await bot.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)